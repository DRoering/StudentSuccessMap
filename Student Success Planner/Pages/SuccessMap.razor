@using Student_Success_Planner.Data
@inject SuccessMapService successMapService
@inject BreadcrumbService breadcrumbService
@inject NavigationManager navigationManager

@if (!canLoadSuccessMap)
{
    //Need try catch block to avoid exception sometimes thrown during this method call
    try
    {
        //Return to programs page
        navigationManager.NavigateTo(navigationManager.BaseUri + "/colleges/departments/programs");
    }
    catch (Exception e)
    {
        Console.Write(e);
    }
}
else
{
    <h3>@breadcrumbService.selectedProgram.getName() Success Map</h3>

    @if (successMap == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <style>
            table, th, td {
                border: 1px solid black;
            }

            .labelCell {
                text-align: center;
            }

            .successObjectivesTable {
                width: 100%;
                text-align: center;
                border-collapse: separate;
                border-spacing: 0px 2px;
            }
        </style>

        <table>
            <!--School Year Column Headers-->
            <tr>
                <th style="width: 15%"></th> <!--Spacer-->
                @for (int i = 0; i < successMap.SchoolYears.Length; i++)
                {
                    <th colspan="3" style="width: 21.25%" class="labelCell">
                        Year @(i + 1) <br />
                        @successMap.SchoolYears[i].StudentClass
                    </th>
                }
            </tr>

            <!--Semester Column Headers-->
            <tr>
                <th></th> <!--Spacer-->
                @for (int i = 0; i < successMap.SchoolYears.Length; i++)
                {
                    <th class="labelCell">
                        @successMap.SchoolYears[i].Fall.Name
                    </th>
                    <th class="labelCell">
                        @successMap.SchoolYears[i].Spring.Name
                    </th>
                    <th class="labelCell">
                        @successMap.SchoolYears[i].Summer.Name
                    </th>
                }
            </tr>

            <!--Success Category rows-->
            @foreach (SuccessCategory successCategory in successMap.SuccessCategories)
            {
                <tr>
                    <!--Success Category Label-->
                    <th class="labelCell">
                        @successCategory.Name
                    </th>

                    <!--Success objectives in successCategory-->
                    @foreach (SchoolYear schoolYear in successMap.SchoolYears)
                    {
                        @foreach (Semester semester in schoolYear.Semesters)
                        {
                            <td>
                                @if (successMap.tryGetSuccessObjectives(successCategory, semester,
                                 out Student_Success_Planner.Data.SuccessObjective[] successObjectives))
                                {
                                    <table class="successObjectivesTable">
                                        @foreach (Student_Success_Planner.Data.SuccessObjective objective in successObjectives)
                                        {
                                            <SuccessObjective successObjective="objective"></SuccessObjective>
                                        }
                                    </table>
                                }
                            </td>
                        }
                    }
                </tr>
            }
        </table>
    }

    @code {
        private Student_Success_Planner.Data.SuccessMap successMap;

        /// <summary>
        /// Determines if the success map can be loaded.
        /// </summary>
        private bool canLoadSuccessMap
        {
            get
            {
                return breadcrumbService.selectedCollege != null && breadcrumbService.selectedDepartment != null &&
                breadcrumbService.selectedProgram != null;
            }
        }

        protected override async Task OnInitializedAsync()
        {

            //Only attempt to load success map if the required information to do so is available
            if (canLoadSuccessMap)
            {
                try
                {
                    successMap = await successMapService.getSuccessMapAsync(breadcrumbService.selectedProgram);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
        }
    }
}